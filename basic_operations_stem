import random
import time


def generate_random_possibility(words, dim):
    """ This function returns a randomly-generated possibility, instead of generating all
    possible ones.
    """
    # Generate possibility
    possibility = {"word": words[random.randint(0, len(words)-1)],
                   "location": [random.randint(0, dim[0]-1), random.randint(0, dim[1]-1)],
                   "D": "S" if random.random() > 0.5 else "E"}

    # Return it
    return possibility
# This section randomizes the interface of the generated crossword puzzle. 


def is_within_bounds(word_len, line, column, direction, grid_width, grid_height):
    """ Returns whether the given word is withing the bounds of the grid.
    """
    return (direction == "E" and column + word_len <= grid_width) or (direction == "S" and line + word_len <= grid_height)
# This section ensures that a word listed is within the grid of the crossword puzzle
# This helps to prevent words from generating off the page.


def collides_with_existing_words(word, line, column, direction, grid):
    """ Returns whether the given word collides with an existing one.
    """
    for k, letter in enumerate(list(word)):
        if direction == "E":
            # Collisions
            if grid[line][column+k] != 0 and grid[line][column+k] != letter:
                return True
        if direction == "S":
            # Collisions
            if grid[line+k][column] != 0 and grid[line+k][column] != letter:
                return True

    return False
# This section ensures that there is no overlap/collsion with another word
# This is about 15% of the length of the original file.
# This part is particularly intresting as it is laying out the rules to preemptively avoid any 'glitches' or unexpected problems.
# Plan to transcribe the rest of the fundamental aspects of this file soon. 

def ends_are_isolated(word, line, column, direction, grid):
    """ Returns whether the given word is isolated (blank before start and after end).
    """
    if direction == "E":
        # If the preceding space isn't empty
        if not is_cell_free(line, column-1, grid):
            return False
        # If the succeding space isn't empy
        if not is_cell_free(line, column+len(word), grid):
            return False
    if direction == "S":
        # If the preceding space isn't empty
        if not is_cell_free(line-1, column, grid):
            return False
        # If the succeding space isn't empy
        if not is_cell_free(line+len(word), column, grid):
            return False

    return True

def find_new_words(word, line, column, direction, grid, words):
    """ Given a new potential word, looks for new words that might have been created by adding it to the grid.

    Returns None if new words are (geometrically) created but are not valid.
    """
    new_words = []

    for k, letter in enumerate(list(word)):
        if direction == "E":
            # If the space was originally blank and there are adjacent letters
            if grid[line][column+k] == 0 and (line > 0 and grid[line-1][column+k] != 0 or line < len(grid)-1 and grid[line+1][column+k]):
                # Then we have to extract this new word
                poss_word = [letter]
                l = 1
                while line+l < len(grid[0]) and grid[line+l][column+k] != 0:
                    poss_word.append(grid[line+l][column+k])
                    l+=1
                l = 1
                while line-l > 0 and grid[line-l][column+k] != 0:
                    poss_word.insert(0, grid[line-l][column+k])
                    l+=1
                poss_word = ''.join(poss_word)

                # And check if it exists in the list
                if poss_word not in words:
                    return None

                new_words.append({"D": "S", "word":poss_word, "location": [line-l+1, column+k]})

        if direction == "S":
            # If the space was originally blank and there are adjacent letter
            if grid[line+k][column] == 0 and (column > 0 and grid[line+k][column-1] != 0 or column < len(grid[0])-1 and grid[line+k][column+1]):
                # Then we have to extract this new word
                poss_word  = [letter]
                l = 1
                while column+l < len(grid) and grid[line+k][column+l] != 0:
                    poss_word.append(grid[line+k][column+l])
                    l+=1
                l = 1
                while column-l > 0 and grid[line+k][column-l] != 0:
                    poss_word.insert(0, grid[line+k][column-l])
                    l+=1
                poss_word = ''.join(poss_word)

                # And check if it exists in the list
                if poss_word not in words:
                    return None

                new_words.append({"D": "E", "word":poss_word, "location": [line+k,column-l+1]})

    return new_words

def is_valid(possibility, grid, words):
    """ This function determines whether a possibility is still valid in the
    given grid. (see generate_grid)

    A possibility is deemed invalid if:
     -> it extends out of bounds
     -> it collides with any word that already exists, i.e. if any of its
     elements does not match the words already in the grid;
     -> if the cell that precedes and follows it in its direction is not empty.

    The function also analyses how the word interacts with previous adjacent
    words, and invalidates the possibility of returns a list with the new
    words, if applicable.
    """
    # Import possibility to local vars, for clarity
    i = possibility["location"][0]
    j = possibility["location"][1]
    word = possibility["word"]
    D = possibility["D"]

    # Boundaries
    if not is_within_bounds(len(word), i, j, D, len(grid[0]), len(grid)):
        return False

    # Collisions
    if collides_with_existing_words(word, i, j, D, grid):
        return False

    # Start and End
    if not ends_are_isolated(word, i, j, D, grid):
        return False

    # If we can't find any issues, it must be okay!
    return True

